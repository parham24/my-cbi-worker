name = "my-cbi-worker" # نام ورکر شما که در گیت‌هاب است
main = "src/index.js"
compatibility_date = "2024-03-20"

# تعریف دیتابیس‌های شما (اینها از قبل درست بودند)
[[kv_namespaces]]
binding = "DB"
id = "2dc096d76e484bb99717872c192b97a7"

[[kv_namespaces]]
binding = "SCORES_DB"
id = "ff32fe0bd69da49bc8f9f6bc2cc23e8e"

# ==========================================================
# <<< این بخش مهم‌ترین بخش است که احتمالاً ناقص بوده >>>
# این کد به کلودفلر می‌گوید که کلاس BankAnnouncer را بشناسد
# ==========================================================
[[durable_objects.bindings]]
name = "BANK_ANNOUNCER"
class_name = "BankAnnouncer"

[migrations]
dir = "./migrations"```

5.  روی دکمه سبز **"Commit changes"** کلیک کنید. چند دقیقه صبر کنید تا کلودفلر این تغییر را اعمال کند.

---

### مرحله ۲: اصلاح نهایی افزونه (حل مشکل دانلود)

حالا باید کد `background.js` را اصلاح کنیم تا قابلیت دانلود به درستی کار کند.

**دستورالعمل:**

1.  فایل `background.js` را در پوشه افزونه خود باز کنید.
2.  **تمام محتوای فعلی** را پاک کرده و کد کامل و اصلاح شده زیر را جایگزین آن کنید.

**کد کامل و نهایی برای `background.js`:**

```javascript
// =====================================================================
// کد کامل و نهایی background.js - با تمام اصلاحات لازم
// =====================================================================

const WORKER_HTTP_URL = "https://my-cbi-worker.imana20.workers.dev";
const WORKER_WS_URL = "wss://my-cbi-worker.imana20.workers.dev/ws";

let socket = null;

function connectWebSocket() {
    if (socket && (socket.readyState === WebSocket.CONNECTING || socket.readyState === WebSocket.OPEN)) { return; }
    console.log('در حال تلاش برای اتصال به سرور اعلانات...');
    socket = new WebSocket(WORKER_WS_URL);
    socket.onopen = () => { console.log('✅ اتصال به سرور اعلانات با موفقیت برقرار شد.'); };
    socket.onmessage = async (event) => {
        try {
            const message = JSON.parse(event.data);
            if (message.type === 'BANK_LIST_UPDATE') {
                const { reporterId: myId } = await chrome.storage.local.get('reporterId');
                if (myId && message.reporterId && myId === message.reporterId) {
                    console.log('این خبر توسط خود ما گزارش شده بود. نادیده گرفته می‌شود.');
                    return;
                }
                console.log(`خبر جدید از یک کاربر دیگر دریافت شد:`, message);
                const { profiles } = await chrome.storage.local.get('profiles');
                if (!profiles || profiles.length === 0) return;
                const allDesiredBanks = new Set(profiles.flatMap(p => p.banks || []));
                const matchedBank = message.banks.find(availableBank => allDesiredBanks.has(availableBank));
                if (matchedBank) {
                    console.log(`بانک مورد نظر یافت شد: ${matchedBank}. ارسال سیگنال رفرش...`);
                    sendRefreshSignal(matchedBank);
                }
            }
        } catch(e) { console.error("خطا در پردازش پیام از سرور: ", e); }
    };
    socket.onclose = () => {
        console.log('🔌 اتصال به سرور اعلانات قطع شد.');
        socket = null;
        chrome.storage.local.get(['autoRefreshEnabled'], (result) => {
            if (result.autoRefreshEnabled) {
                console.log('تلاش برای اتصال مجدد تا 5 ثانیه دیگر...');
                setTimeout(connectWebSocket, 5000);
            }
        });
    };
    socket.onerror = (err) => { console.error('خطای WebSocket:', err); };
}

function disconnectWebSocket() { if (socket) { console.log('در حال قطع اتصال از سرور اعلانات...'); socket.close(); socket = null; } }
function sendRefreshSignal(bankName) { chrome.tabs.query({ url: "https://ve.cbi.ir/VC/TasRequestVC.aspx*" }, (tabs) => { if (tabs.length > 0) { tabs.forEach(tab => { chrome.tabs.sendMessage(tab.id, { type: 'START_REFRESH', bankName: bankName }); }); } }); }

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'TOGGLE_REFRESH') {
        if (message.enabled) { connectWebSocket(); } else { disconnectWebSocket(); }
        sendResponse({status: "ok"});
    }
    else if (message.type === 'report_province_state') {
        console.log("گزارش وضعیت استان از content.js دریافت شد. در حال ارسال به سرور...");
        chrome.storage.local.get('reporterId', (result) => {
            if (!result.reporterId) { console.error("شناسه کاربر (reporterId) یافت نشد. ارسال گزارش متوقف شد."); return; }
            const payload = { ...message, reporterId: result.reporterId };
            delete payload.type;
            fetch(`${WORKER_HTTP_URL}/report_province`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
            .then(response => response.text())
            .then(responseText => console.log("پاسخ سرور به گزارش ارسالی:", responseText))
            .catch(error => console.error('خطا در ارسال گزارش به سرور:', error));
        });
        sendResponse({status: "received"});
    }
    else if (message.type === 'download_html' && message.filename && message.htmlContent) {
        // ==========================================================
        // <<<< این بخش برای حل مشکل دانلود اصلاح شده است >>>>
        // ==========================================================
        const blob = new Blob([message.htmlContent], { type: 'text/html' });
        const reader = new FileReader();
        reader.onload = function() {
            chrome.downloads.download({
                url: reader.result, // <<<< استفاده از Data URL به جای Object URL
                filename: message.filename,
                saveAs: true
            });
        };
        reader.readAsDataURL(blob);
        sendResponse({status: "download_started"});
    }
    return true; 
});

function initialize() {
    chrome.storage.local.get('reporterId', (result) => {
        if (!result.reporterId) {
            const newId = `ext_${Date.now()}_${Math.random().toString(36).substring(2, 10)}`;
            chrome.storage.local.set({ reporterId: newId });
            console.log(`یک شناسه جدید برای کاربر ایجاد شد: ${newId}`);
        }
    });
    chrome.storage.local.get(['autoRefreshEnabled'], (result) => {
        if (result.autoRefreshEnabled) {
            console.log('رفرش خودکار فعال است. اتصال در زمان استارت‌آپ...');
            connectWebSocket();
        } else {
            console.log('رفرش خودکار در زمان استارت‌آپ غیرفعال است.');
        }
    });
}

chrome.runtime.onStartup.addListener(initialize);
chrome.runtime.onInstalled.addListener(initialize);
